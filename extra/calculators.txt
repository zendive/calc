#---------------------------------------------------
# geg

Mouse Buttons:
    Left      Zoom Selection
    Middle    Solve Function Intercepts
    Right     Solve Axis Intercepts

The following functions are recognised:
    sin       (Sine)
    cos       (Cosine)
    tan       (Tangent)
    asin      (Arc-Sine)
    acos      (Arc-Cosine)
    atan      (Arc-Tan)
    sinc      (Sinc)
    sinh      (Hyperbolic Sine)
    cosh      (Hyperbolic Cosine)
    tanh      (Hyperbolic Tangent)
    log       (log base 10)
    ln        (Natural Log, Log base e)
    sqrt      (Square Root)
    cbrt      (Cube Root)
    u         (Unit Step)
    abs       (Absolute Value)

The following constants are recognised:
    pi        (3.141592654....)
    e         (2.718281828....)

The following operators are recognised:
    +         (Add)
    -         (Subtract)
    *         (Multiply)
    /         (Divide)
    ^         (Raise to the Power)

The following miscellaneous symbols are recognised:
    (         (Left Bracket)
    )         (Right Bracket)
    [         (Left Square Bracket)
    ]         (Right Square Bracket)
    {         (Left Curly Bracket)
    }         (Right Curly Bracket)
    x         (Variable Parameter)

The Extended Backus Naur Notation (EBNF used in geg is:
    <expression> ::= [ + | - ] <term>   { + | - <term> }
    <term>       ::= <factor> { * | / | ^ <factor> }
    <factor>     ::= <number> | <function> | (<expression>)
    <number>     ::= <float> | x
    <function>   ::= <function_name>(<expression>)
    

---------3.4. To Calculate LogarithmsTo calculate logarithms, use the buttons described in the following table.FunctionButtonExampleResultCommon logarithmlog10, log1Common antilogarithmINV and log1, INV, log10Natural logarithmln10, ln2.302585093Natural antilogarithmINV and ln2.302585093, INV, ln10------------
Statistical Mode


In this mode the left column of buttons is allocated to statistical functions:


Buttons
Function


N
Recall the number of data items entered


InvN
Display the sum of all data items entered


Mea
Display the mean of the data items entered


InvMea
Display the sum of the square of all data items entered


Std
Display the standard deviation (n)


InvStd
Display the population standard deviation (n-1)


Med
Display the median


Dat
Enter a data item


InvDat
Clear last data item entered


Cst
Clear the store of all data item entered











Trigonometric Mode


In this mode the left column of buttons is allocated to trigonometric functions:


Buttons
Function


Hyp
Enter Hyperbolic sub mode. Hyp Sin for example is the hyperbolic sine: sinh(x)


Sin
Compute the sine


InvSin
Compute the inverse sine


Cos
Compute the cosine


InvCos
Compute the inverse cosine


Tan
Compute the tangent


InvTan
Compute the inverse tangent


Log
Compute the Log base 10


InvLog
Compute 10 to the power of x


Ln
Compute the natural logarithm. That is the log to base e


InvLn
Compute e to the power of x









Mod and Inv Mod

Mod gives the remainder of dividing the displayed number by the next input number.

22 Mod 8 = will give the result 6


22.345 Mod 8 = will give the result 6.345

Inv Mod does integer division of the displayed number by the next input number.

22 Inv Mod 8 = will give the result 2


22.345 Inv Mod 8 = also gives 2






%


Used instead of the = key, % interprets the final operation carried out in the current calculation as follows:



If the final operator is + or - show the result as a percentage of the final operand. 


If the final operator is * divide the result of the multiplication by 100. 


If the final operator is / give the left operand as a percentage of the right operand. 


If the final operator is x^y give the left operand raised to the power of the (right operand / 100). 


In all other cases the % key gives identical results to the = key. 

Examples:

11 + 89 % gives 112.35.. (89 + 11 = 100, and 100 is 112.35 percent of 89)


42 * 3 % gives 1.26 (42 * 3 / 100)


45 / 55 % gives 81.81... (45 is 81.81.. percent of 55)


2 ^ 300 % gives 8 (2 to the power (300/100))
















Lsh and Inv Lsh

Lsh left shifts the integer part of the displayed value (multiplies it by 2) n times, where n is the next input number, and gives an integer result:

10 Lsh 3 = gives 80 (10 multiplied by 2 three times).


10.345 Lsh 3 = also gives 80.

Inv Lsh right shifts the value (performs an integer divide by 2) n times.

16 Inv Lsh 2 = gives 4 (16 divided by 2 twice).


16.999 Inv Lsh 2 = also gives 4.




















Cmp, And, Or and Inv Or


The Cmp, And and Or functions perform bitwise logical operations and therefore appear more meaningful if the Base is set to Hex, Oct or Bin rather than Dec. In the following examples Base is set to Bin.

Cmp performs a 1's complement (inverts the bits).

101 Cmp gives 111...111010

And does a logical AND.

101 And 110 = gives 100

Or does the logical OR.

101 Or 110 = gives 111

Inv Or performs the logical XOR (exclusive OR) operation.

101 Inv Or 110 = gives 11















4.1.

How do I get pi=3.1415926...?




Simply type Inv EE.



4.2. 

How do I get e, the Euler number?




Type 1 Inv Ln.



4.3. 

How do I get two fixed digits after the period?




Click on the Configure button, this will bring up the configuration dialog. Check Set fixed precision and adjust the spin control so that it shows a 2.



4.4. 

What about Precision?




The main factor determining the precision of KCalc is whether your libc and libmath supports the C data type long double. If this is the case, KCalc will detect this at compile time and use it as its fundamental data type to represent numbers. Check KCalc's About dialog (in the Configure dialog box) in order to find out what the fundamental data type for your copy of KCalc is.


Unless you have a libc and libmath of exceptionally high quality, you will be able to observe some ?interesting? results when trying to execute computations such as: 123.22 - 123.21, 2.01 - 2, 123.88 - 123.87 and similar. However if you think this is bad I ask you to do the same computation on the calculator provided with Windows®.


Adjust the Precision in KCalc's Configure dialog so that the above computations work correctly. I recommend a precision of 14 if the fundamental data type for your copy of KCalc is long double, otherwise 8 or 10.


Higher precision doesn't necessarily lead to better results. Play with the precision and you will see what I mean.